// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: reins_transaction_price.sql

package domains

import (
	"context"
	"time"
)

const createReinsTransactionPrice = `-- name: CreateReinsTransactionPrice :one
INSERT INTO reins_transaction_price (room_id, price, start_month, end_month)
SELECT $1, $2, $3, $4
WHERE NOT EXISTS (
    SELECT room_id
    FROM reins_transaction_price
    WHERE room_id = $1 AND start_month = $3 AND end_month = $4
)
    RETURNING room_id, price, start_month, end_month
`

type CreateReinsTransactionPriceParams struct {
	RoomID     int32
	Price      int32
	StartMonth time.Time
	EndMonth   time.Time
}

type CreateReinsTransactionPriceRow struct {
	RoomID     int32
	Price      int32
	StartMonth time.Time
	EndMonth   time.Time
}

func (q *Queries) CreateReinsTransactionPrice(ctx context.Context, arg CreateReinsTransactionPriceParams) (CreateReinsTransactionPriceRow, error) {
	row := q.db.QueryRowContext(ctx, createReinsTransactionPrice,
		arg.RoomID,
		arg.Price,
		arg.StartMonth,
		arg.EndMonth,
	)
	var i CreateReinsTransactionPriceRow
	err := row.Scan(
		&i.RoomID,
		&i.Price,
		&i.StartMonth,
		&i.EndMonth,
	)
	return i, err
}
