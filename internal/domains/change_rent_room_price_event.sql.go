// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: change_rent_room_price_event.sql

package domains

import (
	"context"
	"time"
)

const createChangeRentRoomPriceEvent = `-- name: CreateChangeRentRoomPriceEvent :one
INSERT INTO change_rent_room_price_event (monthly_rent, security_deposit, key_money, brokerage_fee, renewal_fee, guarantee_fee, common_service_fee, room_id, recorded_at)
SELECT $1, $2, $3, $4, $5, $6, $7, $8, $9
WHERE NOT EXISTS (
    SELECT room_id
    FROM change_rent_room_price_event
    WHERE room_id = $8
)
    RETURNING id, monthly_rent, security_deposit, key_money, brokerage_fee, renewal_fee, guarantee_fee, common_service_fee, room_id, recorded_at
`

type CreateChangeRentRoomPriceEventParams struct {
	MonthlyRent      int32
	SecurityDeposit  int32
	KeyMoney         int32
	BrokerageFee     int32
	RenewalFee       int32
	GuaranteeFee     int32
	CommonServiceFee int32
	RoomID           int32
	RecordedAt       time.Time
}

func (q *Queries) CreateChangeRentRoomPriceEvent(ctx context.Context, arg CreateChangeRentRoomPriceEventParams) (ChangeRentRoomPriceEvent, error) {
	row := q.db.QueryRowContext(ctx, createChangeRentRoomPriceEvent,
		arg.MonthlyRent,
		arg.SecurityDeposit,
		arg.KeyMoney,
		arg.BrokerageFee,
		arg.RenewalFee,
		arg.GuaranteeFee,
		arg.CommonServiceFee,
		arg.RoomID,
		arg.RecordedAt,
	)
	var i ChangeRentRoomPriceEvent
	err := row.Scan(
		&i.ID,
		&i.MonthlyRent,
		&i.SecurityDeposit,
		&i.KeyMoney,
		&i.BrokerageFee,
		&i.RenewalFee,
		&i.GuaranteeFee,
		&i.CommonServiceFee,
		&i.RoomID,
		&i.RecordedAt,
	)
	return i, err
}
